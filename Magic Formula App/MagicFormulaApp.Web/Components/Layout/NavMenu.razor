@using HtmlAgilityPack
@using MagicFormulaApp.Web.Models
@using MagicFormulaApp.Web.Services
@using Microsoft.Net.Http.Headers
@implements IAsyncDisposable
@inject SearchSymbolService SearchSymbolService
@inject OpenFilingService OpenFilingService
@inject IJSRuntime JS

<MudPaper Width="250px" Class="py-3" Elevation="0">
    <MudNavMenu>
        <MudText Typo="Typo.h6" Class="px-4">Latest Filings</MudText>
        <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">Secondary Text</MudText>
        <MudDivider Class="my-2" />
        @foreach (var report in reports)
        {
            <MudNavLink OnClick="@(() => OnFilingSelected(report))">
                <b>@report.FilingDate</b> @report.Form
            </MudNavLink>
        }
    </MudNavMenu>
</MudPaper>

@code {
    private List<Report> reports = new List<Report>();

    protected override async Task OnInitializedAsync()
    {
        this.SearchSymbolService.SymbolChanged += OnSymbolChanged;
        await Task.CompletedTask;
    }

    private async Task OnFilingSelected(Report report)
    {
        await OpenFilingService.OnFilingSelectedAsync(this, new OpenFilingEventArgs(report));
    }

    private async Task OnSymbolChanged(object sender, EventArgs e)
    {
        reports.Clear();

        var args = (SearchSymbolEventArgs)e;
        await JS.InvokeVoidAsync("console.log", args.Ticker.Symbol);
        var baseUrl = "https://www.sec.gov/Archives/edgar/data/";
        var cik = args.Ticker.Cik.ToString().PadLeft(10, '0');
        var url = $"https://data.sec.gov/submissions/CIK{cik}.json";
        var client = new HttpClient();
        client.DefaultRequestHeaders.TryAddWithoutValidation(HeaderNames.UserAgent, "Lekasoft aldo@lekasoft.com");
        var submission = await client.GetFromJsonAsync<Submission>(url);
        for (int i = 0; i < submission.Filings.Recent.AccessionNumber.Length; i++)
        {
            if (submission.Filings.Recent.PrimaryDocument[i].EndsWith(".htm"))
            {
                var report = new Report
                    {
                        AccessionNumber = submission.Filings.Recent.AccessionNumber[i],
                        FilingDate = submission.Filings.Recent.FilingDate[i],
                        Form = submission.Filings.Recent.Form[i],
                        PrimaryDocument = submission.Filings.Recent.PrimaryDocument[i]
                    };

                var accessionNumber = report.AccessionNumber.Replace("-", "");
                report.Url = $"{baseUrl}{args.Ticker.Cik}/{accessionNumber}/{report.PrimaryDocument}";
                reports.Add(report);
            }
        }

        StateHasChanged();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        this.SearchSymbolService.SymbolChanged -= OnSymbolChanged;
        await Task.CompletedTask;
    }
}